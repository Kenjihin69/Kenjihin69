local player = game.Players.LocalPlayer
local character = player.Character

if character == nil then
    player.CharacterAdded:Wait()
    character = player.Character
end

function Cinematic(moduleData)
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local TweenService = game:GetService("TweenService")
        local localPlayer = Players.LocalPlayer
        local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
        local camera = game.Workspace.CurrentCamera
        local CinematicsModule = moduleData
        local CurrentCameraCFrame = camera.CFrame
        local FrameTime = 0
        local Connection
    
        character.Humanoid.AutoRotate = false
        camera.CameraType = Enum.CameraType.Scriptable
        
        Connection = RunService.RenderStepped:Connect(function(DT)
            FrameTime += DT * 60
            local NeededFrame = CinematicsModule[math.ceil(FrameTime)]
    
            if NeededFrame then
                TweenService:Create(camera, TweenInfo.new(0.015, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {
                    CFrame = character.HumanoidRootPart.CFrame * NeededFrame.cframe
                }):Play()
                camera.FieldOfView = NeededFrame.fov
            else
                Connection:Disconnect()
                camera.FieldOfView = 70
                character.Humanoid.AutoRotate = true
                camera.CameraType = Enum.CameraType.Custom
                camera.CFrame = CurrentCameraCFrame    
            end
        end)
    end
    Cinematic(loadstring(game:HttpGet('https://pastebin.com/k9S4B5kK'))()

local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    
    local ImpactFrames = Instance.new("Folder")
    ImpactFrames.Name = "ImpactFrames"
    ImpactFrames.Parent = ScreenGui
